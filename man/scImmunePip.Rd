% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Dubhe.R
\name{scImmunePip}
\alias{scImmunePip}
\title{Run a post-quantification 10X technology-format scImmune Profiling pipeline}
\usage{
scImmunePip(
  project_name = "Ursa_scImmune",
  input_dir = "./",
  output_dir = "./",
  pheno_file,
  integration_method = c("harmony", "seurat"),
  immunarch.repLoad.mode = "paired",
  immunarch.repLoad.coding = TRUE,
  immunarch.repoverlap.method1.method = "morisita",
  immunarch.repoverlap.method1.col = "aa",
  immunarch.repoverlap.method1.a = 0.5,
  immunarch.repoverlap.method1.b = 0.5,
  immunarch.repoverlap.method1.step = 1000,
  immunarch.repoverlap.method1.n.steps = 10,
  immunarch.repoverlap.method1.downsample = FALSE,
  immunarch.repoverlap.method1.bootstrap = NA,
  immunarch.repoverlap.method1.force.matrix = FALSE,
  immunarch.repoverlap.method2.method = "morisita",
  immunarch.repoverlap.method2.col = "aa",
  immunarch.repoverlap.method2.a = 0.5,
  immunarch.repoverlap.method2.b = 0.5,
  immunarch.repoverlap.method2.step = 1000,
  immunarch.repoverlap.method2.n.steps = 10,
  immunarch.repoverlap.method2.downsample = FALSE,
  immunarch.repoverlap.method2.bootstrap = NA,
  immunarch.repoverlap.method2.force.matrix = FALSE,
  immunarch.repoverlap.method3.method = "morisita",
  immunarch.repoverlap.method3.a = 0.5,
  immunarch.repoverlap.method3.b = 0.5,
  immunarch.repoverlap.method3.step = 1000,
  immunarch.repoverlap.method3.n.steps = 10,
  immunarch.repoverlap.method3.downsample = FALSE,
  immunarch.repoverlap.method3.bootstrap = NA,
  immunarch.repoverlap.method3.force.matrix = FALSE,
  immunarch.geneusage.gene = c("hs.trbv", "HomoSapiens.TRBJ", "macmul.IGHV"),
  immunarch.geneusage.quant = c(NA, "count"),
  immunarch.geneusage.ambig = c("inc", "exc", "maj"),
  immunarch.geneusage.type = c("segment", "allele", "family"),
  immunarch.geneusage.norm = FALSE,
  immunarch.geneusageanalysis.method1.method = c("js+hclust", "pca+kmeans", "anova",
    "js+pca+kmeans"),
  immunarch.geneusageanalysis.method1.base = 2,
  immunarch.geneusageanalysis.method1.norm.entropy = FALSE,
  immunarch.geneusageanalysis.method1.cor = c("pearson", "kendall", "spearman"),
  immunarch.geneusageanalysis.method1.do.norm = TRUE,
  immunarch.geneusageanalysis.method1.laplace = 1e-12,
  immunarch.geneusageanalysis.method1.k = 2,
  immunarch.geneusageanalysis.method1.eps = 0.01,
  immunarch.geneusageanalysis.method1.perp = 1,
  immunarch.geneusageanalysis.method1.theta = 0.1,
  immunarch.geneusageanalysis.method2.method = c("js+hclust", "pca+kmeans", "anova",
    "js+pca+kmeans"),
  immunarch.geneusageanalysis.method2.base = 2,
  immunarch.geneusageanalysis.method2.norm.entropy = FALSE,
  immunarch.geneusageanalysis.method2.cor = c("pearson", "kendall", "spearman"),
  immunarch.geneusageanalysis.method2.do.norm = TRUE,
  immunarch.geneusageanalysis.method2.laplace = 1e-12,
  immunarch.geneusageanalysis.method2.k = 2,
  immunarch.geneusageanalysis.method2.eps = 0.01,
  immunarch.geneusageanalysis.method2.perp = 1,
  immunarch.geneusageanalysis.method2.theta = 0.1,
  immunarch.geneusageanalysis.method3.method = c("js+hclust", "pca+kmeans", "anova",
    "js+pca+kmeans"),
  immunarch.geneusageanalysis.method3.base = 2,
  immunarch.geneusageanalysis.method3.norm.entropy = FALSE,
  immunarch.geneusageanalysis.method3.cor = c("pearson", "kendall", "spearman"),
  immunarch.geneusageanalysis.method3.do.norm = TRUE,
  immunarch.geneusageanalysis.method3.laplace = 1e-12,
  immunarch.geneusageanalysis.method3.k = 2,
  immunarch.geneusageanalysis.method3.eps = 0.01,
  immunarch.geneusageanalysis.method3.perp = 1,
  immunarch.geneusageanalysis.method3.theta = 0.1,
  immunarch.spectratype.method1.quant = "id",
  immunarch.spectratype.method1.col = "nt",
  immunarch.spectratype.method2.quant = "count",
  immunarch.spectratype.method2.col = "aa+v",
  immunarch.repdiversity.col = "aa",
  immunarch.repdiversity.max.q = 6,
  immunarch.repdiversity.min.q = 1,
  immunarch.repdiversity.q = 5,
  immunarch.repdiversity.step = NA,
  immunarch.repdiversity.quantile = c(0.025, 0.975),
  immunarch.repdiversity.extrapolation = NA,
  immunarch.repdiversity.perc = 50,
  immunarch.repdiversity.norm = TRUE,
  immunarch.repdiversity.do.norm = NA,
  immunarch.repdiversity.laplace = 0,
  immunarch.trackclonotypes.method1.col = "aa",
  immunarch.trackclonotypes.method1.norm = TRUE,
  immunarch.trackclonotypes.method2.col = "aa",
  immunarch.trackclonotypes.method2.norm = TRUE,
  screpertoire.combinebcr.call.related.clones = TRUE,
  screpertoire.combinebcr.threshold = 0.85,
  screpertoire.combinebcr.removeNA = TRUE,
  screpertoire.combinebcr.removeMulti = FALSE,
  screpertoire.combinebcr.filterMulti = TRUE,
  screpertoire.combinetcr.removeNA = TRUE,
  screpertoire.combinetcr.removeMulti = FALSE,
  screpertoire.combinetcr.filterMulti = TRUE,
  screpertoire.quantcontig.cloneCall = "strict",
  screpertoire.quantcontig.chain = "both",
  screpertoire.quantcontig.scale = TRUE,
  screpertoire.quantcontig.group.by = NULL,
  screpertoire.quantcontig.split.by = NULL,
  screpertoire.quantcontig.order = TRUE,
  screpertoire.quantcontig.exportTable = TRUE,
  screpertoire.abundancecontig.cloneCall = "strict",
  screpertoire.abundancecontig.chain = "both",
  screpertoire.abundancecontig.group.by = NULL,
  screpertoire.abundancecontig.split.by = NULL,
  screpertoire.abundancecontig.order = TRUE,
  screpertoire.lengthcontig.choice1.cloneCall = "aa",
  screpertoire.lengthcontig.choice1.chain = "both",
  screpertoire.lengthcontig.choice1.group.by = NULL,
  screpertoire.lengthcontig.choice1.split.by = NULL,
  screpertoire.lengthcontig.choice1.order = TRUE,
  screpertoire.lengthcontig.choice1.scale = FALSE,
  screpertoire.lengthcontig.choice1.exportTable = FALSE,
  screpertoire.lengthcontig.choice2.cloneCall = "aa",
  screpertoire.lengthcontig.choice2.chain = "both",
  screpertoire.lengthcontig.choice2.group.by = NULL,
  screpertoire.lengthcontig.choice2.split.by = NULL,
  screpertoire.lengthcontig.choice2.order = TRUE,
  screpertoire.lengthcontig.choice2.scale = FALSE,
  screpertoire.lengthcontig.choice2.exportTable = FALSE,
  screpertoire.compareclonotypes.choice1.cloneCall = "strict",
  screpertoire.compareclonotypes.choice1.chain = "both",
  screpertoire.compareclonotypes.choice1.samples = NULL,
  screpertoire.compareclonotypes.choice1.numbers = NULL,
  screpertoire.compareclonotypes.choice1.split.by = NULL,
  screpertoire.compareclonotypes.choice1.graph = "alluvial",
  screpertoire.compareclonotypes.choice1.exportTable = FALSE,
  screpertoire.compareclonotypes.choice2.cloneCall = "aa",
  screpertoire.compareclonotypes.choice2.chain = "both",
  screpertoire.compareclonotypes.choice2.samples = NULL,
  screpertoire.compareclonotypes.choice2.numbers = NULL,
  screpertoire.compareclonotypes.choice2.split.by = NULL,
  screpertoire.compareclonotypes.choice2.graph = "alluvial",
  screpertoire.compareclonotypes.choice2.exportTable = FALSE,
  screpertoire.compareclonotypes.choice3.cloneCall = "nt",
  screpertoire.compareclonotypes.choice3.chain = "both",
  screpertoire.compareclonotypes.choice3.samples = NULL,
  screpertoire.compareclonotypes.choice3.numbers = NULL,
  screpertoire.compareclonotypes.choice3.split.by = NULL,
  screpertoire.compareclonotypes.choice3.graph = "alluvial",
  screpertoire.compareclonotypes.choice3.exportTable = FALSE,
  screpertoire.compareclonotypes.choice4.cloneCall = "gene",
  screpertoire.compareclonotypes.choice4.chain = "both",
  screpertoire.compareclonotypes.choice4.samples = NULL,
  screpertoire.compareclonotypes.choice4.numbers = NULL,
  screpertoire.compareclonotypes.choice4.split.by = NULL,
  screpertoire.compareclonotypes.choice4.graph = "alluvial",
  screpertoire.compareclonotypes.choice4.exportTable = FALSE,
  screpertoire.vizgenes.gene = "V",
  screpertoire.vizgenes.chain = "TRA",
  screpertoire.vizgenes.plot = "heatmap",
  screpertoire.vizgenes.y.axis = "sample",
  screpertoire.vizgenes.order = "gene",
  screpertoire.vizgenes.scale = TRUE,
  screpertoire.vizgenes.group.by = NULL,
  screpertoire.vizgenes.split.by = NULL,
  screpertoire.vizgenes.exportTable = FALSE,
  screpertoire.clonalhomeostasis.cloneTypes = c(Rare = 1e-04, Small = 0.001, Medium =
    0.01, Large = 0.1, Hyperexpanded = 1),
  screpertoire.clonalhomeostasis.cloneCall = "strict",
  screpertoire.clonalhomeostasis.chain = "both",
  screpertoire.clonalhomeostasis.group.by = NULL,
  screpertoire.clonalhomeostasis.split.by = NULL,
  screpertoire.clonalhomeostasis.exportTable = FALSE,
  screpertoire.clonaloverlap.cloneCall = "strict",
  screpertoire.clonaloverlap.method = c("morisita"),
  screpertoire.clonaloverlap.chain = "both",
  screpertoire.clonaloverlap.split.by = NULL,
  screpertoire.clonaloverlap.exportTable = FALSE,
  screpertoire.clonalproportion.split = c(10, 100, 1000, 10000, 30000, 1e+05),
  screpertoire.clonalproportion.cloneCall = "strict",
  screpertoire.clonalproportion.chain = "both",
  screpertoire.clonalproportion.group.by = NULL,
  screpertoire.clonalproportion.split.by = NULL,
  screpertoire.clonalproportion.exportTable = FALSE,
  screpertoire.clonesizedistribution.cloneCall = "strict",
  screpertoire.clonesizedistribution.chain = "both",
  screpertoire.clonesizedistribution.method = "ward.D2",
  screpertoire.clonesizedistribution.threshold = 1,
  screpertoire.clonesizedistribution.group.by = NULL,
  screpertoire.clonesizedistribution.split.by = NULL,
  screpertoire.clonesizedistribution.exportTable = FALSE,
  screpertoire.clonesizedistribution.hclust.method = "ward.D2",
  screpertoire.clonesizediversity.chain = "both",
  screpertoire.clonesizediversity.group.by = NULL,
  screpertoire.clonesizediversity.x.axis = NULL,
  screpertoire.clonesizediversity.split.by = NULL,
  screpertoire.clonesizediversity.exportTable = FALSE,
  screpertoire.clonesizediversity.n.boots = 100,
  screpertoire.clonesizediversity.return.boots = FALSE,
  screpertoire.clonesizediversity.skip.boots = FALSE,
  seurat.createseuratobject.min.cells = 3,
  seurat.subset.min.nFeature_RNA = 200,
  seurat.subset.max.nFeature_RNA = 6000,
  seurat.subset.max.percent.mt = 10,
  seurat.normalizedata.assay = NULL,
  seurat.normalizedata.normalization.method = "LogNormalize",
  seurat.normalizedata.scale.factor = 10000,
  seurat.normalizedata.margin = 1,
  seurat.findvariablefeatures.selection.method = "vst",
  seurat.findvariablefeatures.loess.span = 0.3,
  seurat.findvariablefeatures.clip.max = "auto",
  seurat.findvariablefeatures.num.bin = 20,
  seurat.findvariablefeatures.binning.method = "equal_width",
  seurat.findvariablefeatures.nfeatures = 2000,
  seurat.findvariablefeatures.mean.cutoff = c(0.1, 8),
  seurat.findvariablefeatures.dispersion.cutoff = c(1, Inf),
  seurat.scaledata.features = NULL,
  seurat.scaledata.vars.to.regress = NULL,
  seurat.scaledata.split.by = NULL,
  seurat.scaledata.model.use = "linear",
  seurat.scaledata.use.umi = FALSE,
  seurat.scaledata.do.scale = TRUE,
  seurat.scaledata.do.center = TRUE,
  seurat.scaledata.scale.max = 10,
  seurat.scaledata.block.size = 1000,
  seurat.scaledata.min.cells.to.block = 3000,
  seurat.runpca.assay = NULL,
  seurat.runpca.features = NULL,
  seurat.runpca.npcs = 50,
  seurat.runpca.rev.pca = FALSE,
  seurat.runpca.weight.by.var = TRUE,
  seurat.runpca.ndims.print = 1:5,
  seurat.runpca.nfeatures.print = 30,
  seurat.runpca.reduction.name = "pca",
  seurat.runpca.reduction.key = "PC_",
  seurat.runpca.seed.use = 42,
  seurat.selectintegrationfeatures.nfeatures = 2000,
  seurat.selectintegrationfeatures.assay = NULL,
  seurat.selectintegrationfeatures.fvf.nfeatures = 2000,
  seurat.findintegrationanchors.assay = NULL,
  seurat.findintegrationanchors.reference = NULL,
  seurat.findintegrationanchors.scale = TRUE,
  seurat.findintegrationanchors.normalization.method = "LogNormalize",
  seurat.findintegrationanchors.sct.clip.range = NULL,
  seurat.findintegrationanchors.reduction = "rpca",
  seurat.findintegrationanchors.l2.norm = TRUE,
  seurat.findintegrationanchors.dims = 1:30,
  seurat.findintegrationanchors.k.anchor = 5,
  seurat.findintegrationanchors.k.filter = 200,
  seurat.findintegrationanchors.k.score = 30,
  seurat.findintegrationanchors.max.features = 200,
  seurat.findintegrationanchors.nn.method = "annoy",
  seurat.findintegrationanchors.n.trees = 50,
  seurat.findintegrationanchors.eps = 0,
  seurat.integratedata.new.assay.name = "integrated",
  seurat.integratedata.normalization.method = "LogNormalize",
  seurat.integratedata.features = NULL,
  seurat.integratedata.features.to.integrate = NULL,
  seurat.integratedata.dims = 30,
  seurat.integratedata.k.weight = 100,
  seurat.integratedata.weight.reduction = NULL,
  seurat.integratedata.sd.weight = 1,
  seurat.integratedata.sample.tree = NULL,
  seurat.integratedata.preserve.order = FALSE,
  seurat.integratedata.eps = 0,
  harmony.runharmony.dims = NULL,
  harmony.runharmony.group.by.vars = "BATCH",
  harmony.runharmony.theta = NULL,
  harmony.runharmony.lambda = NULL,
  harmony.runharmony.sigma = 0.1,
  harmony.runharmony.nclust = NULL,
  harmony.runharmony.tau = 0,
  harmony.runharmony.block.size = 0.05,
  harmony.runharmony.max.iter.harmony = 10,
  harmony.runharmony.max.iter.cluster = 20,
  harmony.runharmony.epsilon.cluster = 1e-05,
  harmony.runharmony.epsilon.harmony = 1e-04,
  harmony.runharmony.plot_convergence = FALSE,
  harmony.runharmony.reference_values = NULL,
  harmony.runharmony.reduction.save = "harmony",
  harmony.runharmony.assay.use = NULL,
  harmony.runharmony.project.dim = TRUE,
  seurat.integration.findvariablefeatures.nfeatures = 2000,
  seurat.integration.findvariablefeatures.selection.method = "vst",
  seurat.integration.findvariablefeatures.loess.span = 0.3,
  seurat.integration.findvariablefeatures.clip.max = "auto",
  seurat.integration.findvariablefeatures.num.bin = 20,
  seurat.integration.findvariablefeatures.binning.method = "equal_width",
  seurat.integration.scaledata.features = NULL,
  seurat.integration.scaledata.vars.to.regress = NULL,
  seurat.integration.scaledata.split.by = NULL,
  seurat.integration.scaledata.model.use = "linear",
  seurat.integration.scaledata.use.umi = FALSE,
  seurat.integration.scaledata.do.scale = TRUE,
  seurat.integration.scaledata.do.center = TRUE,
  seurat.integration.scaledata.scale.max = 10,
  seurat.integration.scaledata.block.size = 1000,
  seurat.integration.scaledata.min.cells.to.block = 3000,
  seurat.integration.runpca.features = NULL,
  seurat.integration.runpca.npcs = 50,
  seurat.integration.runpca.rev.pca = FALSE,
  seurat.integration.runpca.weight.by.var = TRUE,
  seurat.integration.runpca.ndims.print = 1:5,
  seurat.integration.runpca.nfeatures.print = 30,
  seurat.integration.runpca.reduction.key = "PC_",
  seurat.integration.runpca.seed.use = 42,
  seurat.integration.runpca.approx = TRUE,
  seurat.integration.runumap.pcs = 30,
  seurat.integration.runumap.features = NULL,
  seurat.integration.runumap.graph = NULL,
  seurat.integration.runumap.nn.name = NULL,
  seurat.integration.runumap.slot = "data",
  seurat.integration.runumap.umap.method = "uwot",
  seurat.integration.runumap.reduction.model = NULL,
  seurat.integration.runumap.return.model = FALSE,
  seurat.integration.runumap.n.neighbors = 30L,
  seurat.integration.runumap.n.components = 2L,
  seurat.integration.runumap.metric = "cosine",
  seurat.integration.runumap.n.epochs = NULL,
  seurat.integration.runumap.learning.rate = 1,
  seurat.integration.runumap.min.dist = 0.3,
  seurat.integration.runumap.spread = 1,
  seurat.integration.runumap.set.op.mix.ratio = 1,
  seurat.integration.runumap.local.connectivity = 1L,
  seurat.integration.runumap.repulsion.strength = 1,
  seurat.integration.runumap.negative.sample.rate = 5L,
  seurat.integration.runumap.a = NULL,
  seurat.integration.runumap.b = NULL,
  seurat.integration.runumap.uwot.sgd = FALSE,
  seurat.integration.runumap.seed.use = 42L,
  seurat.integration.runumap.metric.kwds = NULL,
  seurat.integration.runumap.angular.rp.forest = FALSE,
  seurat.integration.runumap.densmap = FALSE,
  seurat.integration.runumap.dens.lambda = 2,
  seurat.integration.runumap.dens.frac = 0.3,
  seurat.integration.runumap.dens.var.shift = 0.1,
  seurat.integration.runumap.reduction.name = "umap",
  seurat.integration.runumap.reduction.key = "UMAP_",
  seurat.integration.findneighbors.assay = NULL,
  seurat.integration.findneighbors.features = NULL,
  seurat.integration.findneighbors.k.param = 20,
  seurat.integration.findneighbors.return.neighbor = FALSE,
  seurat.integration.findneighbors.prune.SNN = 1/15,
  seurat.integration.findneighbors.nn.method = "annoy",
  seurat.integration.findneighbors.n.trees = 50,
  seurat.integration.findneighbors.annoy.metric = "euclidean",
  seurat.integration.findneighbors.nn.eps = 0,
  seurat.integration.findneighbors.force.recalc = FALSE,
  seurat.integration.findneighbors.do.plot = FALSE,
  seurat.integration.findneighbors.graph.name = NULL,
  seurat.integration.findneighbors.l2.norm = FALSE,
  seurat.integration.findneighbors.cache.index = FALSE,
  seurat.integration.findclusters.graph.name = NULL,
  seurat.integration.findclusters.modularity.fxn = 1,
  seurat.integration.findclusters.initial.membership = NULL,
  seurat.integration.findclusters.node.sizes = NULL,
  seurat.integration.findclusters.resolution = 0.8,
  seurat.integration.findclusters.method = "matrix",
  seurat.integration.findclusters.algorithm = 1,
  seurat.integration.findclusters.n.start = 10,
  seurat.integration.findclusters.n.iter = 10,
  seurat.integration.findclusters.random.seed = 0,
  seurat.integration.findclusters.group.singletons = TRUE,
  seurat.integration.findclusters.temp.file.location = NULL,
  seurat.integration.findclusters.edge.file.name = NULL,
  singler.ref = "HumanPrimaryCellAtlas",
  singler.labels = "HumanPrimaryCellAtlasLevel1",
  singler.method = NULL,
  singler.genes = "de",
  singler.sd.thresh = 1,
  singler.de.method = "classic",
  singler.de.n = NULL,
  singler.de.args = list(),
  singler.aggr.ref = FALSE,
  singler.aggr.args = list(),
  singler.recompute = TRUE,
  singler.restrict = NULL,
  singler.quantile = 0.8,
  singler.fine.tune = TRUE,
  singler.tune.thresh = 0.05,
  singler.prune = TRUE,
  singler.assay.type.test = "logcounts",
  singler.assay.type.ref = "logcounts",
  singler.check.missing = TRUE,
  screpertoire.combineexpression.cloneCall = "strict",
  screpertoire.combineexpression.chain = "both",
  screpertoire.combineexpression.group.by = "none",
  screpertoire.combineexpression.proportion = TRUE,
  screpertoire.combineexpression.filterNA = FALSE,
  screpertoire.combineexpression.cloneTypes = c(Rare = 1e-04, Small = 0.001, Medium =
    0.01, Large = 0.1, Hyperexpanded = 1),
  screpertoire.combineexpression.addLabel = FALSE,
  screpertoire.occupiedscrepertoire.label = TRUE,
  screpertoire.occupiedscrepertoire.facet.by = NULL,
  screpertoire.occupiedscrepertoire.proportion = FALSE,
  screpertoire.occupiedscrepertoire.na.include = FALSE,
  screpertoire.occupiedscrepertoire.exportTable = FALSE,
  screpertoire.clonaldiversity.chain = "both",
  screpertoire.clonaldiversity.group.by = NULL,
  screpertoire.clonaldiversity.x.axis = NULL,
  screpertoire.clonaldiversity.split.by = NULL,
  screpertoire.clonaldiversity.exportTable = FALSE,
  screpertoire.clonaldiversity.n.boots = 100,
  screpertoire.clonaldiversity.return.boots = FALSE,
  screpertoire.clonaldiversity.skip.boots = FALSE,
  screpertoire.clonaloverlay.freq.cutpoint = 0,
  screpertoire.clonaloverlay.bins = 10,
  screpertoire.clonaloverlay.facet = "GROUP",
  screpertoire.clonalnetwork.identity = "seurat_clusters",
  screpertoire.clonalnetwork.filter.clones = NULL,
  screpertoire.clonalnetwork.filter.identity = NULL,
  screpertoire.clonalnetwork.filter.proportion = NULL,
  screpertoire.clonalnetwork.filter.graph = FALSE,
  screpertoire.clonalnetwork.cloneCall = "aa",
  screpertoire.clonalnetwork.chain = "both",
  screpertoire.clonalnetwork.exportTable = FALSE,
  screpertoire.clonalnetwork.exportClones = FALSE,
  immunarch.getkmers.col = c("aa", "nt"),
  immunarch.getkmers.coding = TRUE,
  screpertoire.kmer_profile..method = c("freq"),
  screpertoire.kmer_profile..remove.stop = TRUE
)
}
\arguments{
\item{project_name}{Project name. 'Ursa_scImmune' by default.}

\item{input_dir}{Directory to all input files. Current working directory by
default.}

\item{output_dir}{Output directory. Current working directory by default.
A new folder with the given project name with time stamp as suffix will be
created under the specified output directory.}

\item{pheno_file}{Meta data file directory. Accept only .csv/.txt format
files.}

\item{integration_method}{Integration method for combining scRNASeq data.
Default by harmony.}

\item{...}{Arguments passed to other parameters in the dependency pages.
Parameters with the long format: xxx.xxx.xxx usually indicates in lowercases
the parameter origin: <dependent package name>.<function name>.<parameter name>(),
for example: immunarch.repLoad.mode() indicates this parameter 
originates from the package immunarch under the function repLoad() and its
parameter 'mode'. Users could subsequently refer to the dependency 
package for detailed information on parameters and their usage.}
}
\description{
This function will run a bioinformatics analysis of post-quantification scImmune
Profiling pipeline. Supports multiple samples analysis.
}
