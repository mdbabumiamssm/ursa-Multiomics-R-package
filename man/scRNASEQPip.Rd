% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Alioth.R
\name{scRNASEQPip}
\alias{scRNASEQPip}
\title{Run a post-quantification 10X technology-format scRNASEQ pipeline}
\usage{
scRNASEQPip(
  project_name = "Ursa_scRNASEQ",
  input_dir = "./",
  output_dir = "./",
  pheno_file = "study_meta.csv",
  integration_method = "Seurat",
  cc_regression = 0,
  to_impute = "NO",
  find_doublet = "YES",
  run_unbias_vis = "NO",
  seurat.subset.min.cells = 3,
  seurat.subset.min.features = 200,
  seurat.subset.min.nFeature_RNA = 200,
  seurat.subset.max.nFeature_RNA = 25000,
  seurat.max.mito.percent = 10,
  seurat.normalizedata.normalization.method = "LogNormalize",
  seurat.normalizedata.norm.scale.factor = 10000,
  seurat.normalizedata.norm.margin = 1,
  seurat.findvariablefeatures.nfeatures = 2000,
  seurat.findvariablefeatures.selection.method = "vst",
  seurat.findvariablefeatures.loess.span = 0.3,
  seurat.findvariablefeatures.clip.max = "auto",
  seurat.findvariablefeatures.mean.function = "FastExpMean",
  seurat.findvariablefeatures.dispersion.function = "FastLogVMR",
  seurat.findvariablefeatures.num.bin = 20,
  seurat.findvariablefeatures.binning.method = "equal_width",
  seurat.scaledata.features = NULL,
  seurat.scaledata.vars.to.regress = NULL,
  seurat.scaledata.split.by = NULL,
  seurat.scaledata.model.use = "linear",
  seurat.scaledata.use.umi = FALSE,
  seurat.scaledata.do.scale = TRUE,
  seurat.scaledata.do.center = TRUE,
  seurat.scaledata.scale.max = 10,
  seurat.scaledata.block.size = 1000,
  seurat.scaledata.min.cells.to.block = 3000,
  seurat.cellcyclescoring.ctrl = NULL,
  seurat.cellcyclescoring.set.ident = FALSE,
  seurat.cellcyclescoring.seurat.runpca.npcs = 50,
  seurat.cellcyclescoring.seurat.runpca.rev.pca = FALSE,
  seurat.cellcyclescoring.seurat.runpca.weight.by.var = TRUE,
  seurat.cellcyclescoring.seurat.runpca.ndims.print = 5,
  seurat.cellcyclescoring.seurat.runpca.nfeatures.print = 30,
  seurat.cellcyclescoring.seurat.runpca.reduction.key = "PC_",
  seurat.cellcyclescoring.seurat.runpca.seed.use = 42,
  seurat.cellcyclescoring.seurat.runpca.approx = TRUE,
  seurat.runpca.features = NULL,
  seurat.runpca.npcs = 50,
  seurat.runpca.rev.pca = FALSE,
  seurat.runpca.weight.by.var = TRUE,
  seurat.runpca.ndims.print = 5,
  seurat.runpca.nfeatures.print = 30,
  seurat.runpca.reduction.key = "PC_",
  seurat.runpca.seed.use = 42,
  seurat.runpca.approx = TRUE,
  seurat.runumap.pcs = 30,
  seurat.runumap.reduction = "pca",
  seurat.runumap.features = NULL,
  seurat.runumap.graph = NULL,
  seurat.runumap.assay = NULL,
  seurat.runumap.nn.name = NULL,
  seurat.runumap.slot = "data",
  seurat.runumap.umap.method = "uwot",
  seurat.runumap.reduction.model = NULL,
  seurat.runumap.return.model = FALSE,
  seurat.runumap.n.neighbors = 30L,
  seurat.runumap.n.components = 2L,
  seurat.runumap.metric = "cosine",
  seurat.runumap.n.epochs = NULL,
  seurat.runumap.learning.rate = 1,
  seurat.runumap.min.dist = 0.3,
  seurat.runumap.spread = 1,
  seurat.runumap.set.op.mix.ratio = 1,
  seurat.runumap.local.connectivity = 1L,
  seurat.runumap.repulsion.strength = 1,
  seurat.runumap.negative.sample.rate = 5L,
  seurat.runumap.a = NULL,
  seurat.runumap.b = NULL,
  seurat.runumap.uwot.sgd = FALSE,
  seurat.runumap.seed.use = 42L,
  seurat.runumap.metric.kwds = NULL,
  seurat.runumap.angular.rp.forest = FALSE,
  seurat.runumap.densmap = FALSE,
  seurat.runumap.dens.lambda = 2,
  seurat.runumap.dens.frac = 0.3,
  seurat.runumap.dens.var.shift = 0.1,
  seurat.runumap.reduction.name = "umap",
  seurat.runumap.reduction.key = "UMAP_",
  alra.choosek.k = 100,
  alra.choosek.thresh = 6,
  alra.choosek.noise_start = 80,
  alra.choosek.q = 2,
  alra.choosek.use.mkl = F,
  alra.choosek.mkl.seed = -1,
  alra.alra.q = 10,
  alra.alra.quantile.prob = 0.001,
  alra.alra.use.mkl = F,
  alra.alra.mkl.seed = -1,
  doubletfinder.paramSweep_v3.PCs = 30,
  doubletfinder.paramSweep_v3.sct = FALSE,
  doubletfinder.summarizeSweep.gt = FALSE,
  doubletfinder.summarizeSweep.classifications = NULL,
  doubletfinder.homotypic.prop = 0.075,
  doubletfinder.doubletFinder_v3.PCs = 30,
  doubletfinder.doubletFinder_v3.pN = 0.25,
  doubletfinder.doubletFinder_v3.reuse.pANN = FALSE,
  doubletfinder.doubletFinder_v3.sct = FALSE,
  doubletfinder.doubletFinder_v3.annotations = NULL,
  seurat.findneighbors.reduction = "pca",
  seurat.findneighbors.assay = NULL,
  seurat.findneighbors.features = NULL,
  seurat.findneighbors.k.param = 20,
  seurat.findneighbors.return.neighbor = FALSE,
  seurat.findneighbors.prune.SNN = 1/15,
  seurat.findneighbors.nn.method = "annoy",
  seurat.findneighbors.n.trees = 50,
  seurat.findneighbors.annoy.metric = "euclidean",
  seurat.findneighbors.nn.eps = 0,
  seurat.findneighbors.force.recalc = FALSE,
  seurat.findneighbors.do.plot = FALSE,
  seurat.findneighbors.graph.name = NULL,
  seurat.findneighbors.l2.norm = FALSE,
  seurat.findneighbors.cache.index = FALSE,
  seurat.findclusters.graph.name = NULL,
  seurat.findclusters.modularity.fxn = 1,
  seurat.findclusters.initial.membership = NULL,
  seurat.findclusters.node.sizes = NULL,
  seurat.findclusters.resolution = 0.8,
  seurat.findclusters.method = "matrix",
  seurat.findclusters.algorithm = 1,
  seurat.findclusters.n.start = 10,
  seurat.findclusters.n.iter = 10,
  seurat.findclusters.random.seed = 0,
  seurat.findclusters.group.singletons = TRUE,
  seurat.findclusters.temp.file.location = NULL,
  seurat.findclusters.edge.file.name = NULL,
  seurat.runtsne.reduction = "pca",
  seurat.runtsne.cells = NULL,
  seurat.runtsne.features = NULL,
  seurat.runtsne.seed.use = 1,
  seurat.runtsne.tsne.method = "Rtsne",
  seurat.runtsne.dim.embed = 2,
  seurat.runtsne.distance.matrix = NULL,
  seurat.runtsne.reduction.name = "tsne",
  seurat.runtsne.reduction.key = "tSNE_",
  seurat.runtsne.check_duplicates = FALSE,
  deanalysis.p_threshold = 0.05,
  seurat.findallmarkers.min.pct = 0.5,
  seurat.findallmarkers.logfc.threshold = 0.25,
  seurat.findallmarkers.assay = NULL,
  seurat.findallmarkers.features = NULL,
  seurat.findallmarkers.test.use = "wilcox",
  seurat.findallmarkers.slot = "data",
  seurat.findallmarkers.min.diff.pct = -Inf,
  seurat.findallmarkers.node = NULL,
  seurat.findallmarkers.only.pos = FALSE,
  seurat.findallmarkers.max.cells.per.ident = Inf,
  seurat.findallmarkers.random.seed = 1,
  seurat.findallmarkers.latent.vars = NULL,
  seurat.findallmarkers.min.cells.feature = 3,
  seurat.findallmarkers.min.cells.group = 3,
  seurat.findallmarkers.mean.fxn = NULL,
  seurat.findallmarkers.fc.name = NULL,
  seurat.findallmarkers.base = 2,
  seurat.findallmarkers.return.thresh = 0.01,
  seurat.findallmarkers.densify = FALSE,
  seurat.findconservedmarkers.ident.2 = NULL,
  seurat.findconservedmarkers.assay = "RNA",
  seurat.findconservedmarkers.slot = "data",
  seurat.findconservedmarkers.min.cells.group = 3,
  seurat.findconservedmarkers.meta.method = metap::minimump,
  seurat.findmarkers.group.by = NULL,
  seurat.findmarkers.subset.ident = NULL,
  seurat.findmarkers.assay = NULL,
  seurat.findmarkers.slot = "data",
  seurat.findmarkers.reduction = NULL,
  seurat.findmarkers.features = NULL,
  seurat.findmarkers.logfc.threshold = 0.25,
  seurat.findmarkers.test.use = "wilcox",
  seurat.findmarkers.min.pct = 0.1,
  seurat.findmarkers.min.diff.pct = -Inf,
  seurat.findmarkers.only.pos = FALSE,
  seurat.findmarkers.max.cells.per.ident = Inf,
  seurat.findmarkers.random.seed = 1,
  seurat.findmarkers.latent.vars = NULL,
  seurat.findmarkers.min.cells.feature = 3,
  seurat.findmarkers.min.cells.group = 3,
  seurat.findmarkers.mean.fxn = NULL,
  seurat.findmarkers.fc.name = NULL,
  seurat.findmarkers.base = 2,
  seurat.findmarkers.densify = FALSE,
  scubi.palette = rainbow(15)[c(11:1, 15)],
  singler.ref = "HumanPrimaryCellAtlas",
  singler.labels.main = "HumanPrimaryCellAtlasLevel1",
  singler.labels.fine = "HumanPrimaryCellAtlasLevel2",
  singler.method = NULL,
  singler.genes = "de",
  singler.sd.thresh = 1,
  singler.de.method = "classic",
  singler.de.n = NULL,
  singler.de.args = list(),
  singler.aggr.ref = FALSE,
  singler.aggr.args = list(),
  singler.recompute = TRUE,
  singler.restrict = NULL,
  singler.quantile = 0.8,
  singler.fine.tune = TRUE,
  singler.tune.thresh = 0.05,
  singler.prune = TRUE,
  singler.assay.type.test = "logcounts",
  singler.assay.type.ref = "logcounts",
  singler.check.missing = TRUE,
  dose.enrichdgn.pvalueCutoff = 0.05,
  dose.enrichdgn.pAdjustMethod = "BH",
  dose.enrichdgn.universe = NULL,
  dose.enrichdgn.minGSSize = 10,
  dose.enrichdgn.maxGSSize = 500,
  dose.enrichdgn.qvalueCutoff = 0.05,
  dose.enrichdgn.readable = TRUE,
  enrichplot.pairwise_termsim.method = "JC",
  enrichplot.pairwise_termsim.semData = NULL,
  clusterprofiler.comparecluster.pvaluecutoff = 0.05,
  dose.gsencg.exponent = 1,
  dose.gsencg.minGSSize = 10,
  dose.gsencg.maxGSSize = 500,
  dose.gsencg.pvalueCutoff = 0.05,
  dose.gsencg.pAdjustMethod = "BH",
  dose.gsencg.seed = FALSE,
  dose.gsencg.by = "fgsea",
  seurat.selectintegrationfeatures.nfeatures = 2000,
  seurat.selectintegrationfeatures.assay = NULL,
  seurat.selectintegrationfeatures.fvf.nfeatures = 2000,
  seurat.findintegrationanchors.assay = NULL,
  seurat.findintegrationanchors.reference = NULL,
  seurat.findintegrationanchors.anchor.features = 2000,
  seurat.findintegrationanchors.scale = TRUE,
  seurat.findintegrationanchors.normalization.method = c("LogNormalize", "SCT"),
  seurat.findintegrationanchors.sct.clip.range = NULL,
  seurat.findintegrationanchors.reduction = "rpca",
  seurat.findintegrationanchors.l2.norm = TRUE,
  seurat.findintegrationanchors.dims = 1:30,
  seurat.findintegrationanchors.k.anchor = 5,
  seurat.findintegrationanchors.k.filter = 200,
  seurat.findintegrationanchors.k.score = 30,
  seurat.findintegrationanchors.max.features = 200,
  seurat.findintegrationanchors.nn.method = "annoy",
  seurat.findintegrationanchors.n.trees = 50,
  seurat.findintegrationanchors.eps = 0,
  seurat.integratedata.dims = 30,
  seurat.integratedata.new.assay.name = "integrated",
  seurat.integratedata.normalization.method = c("LogNormalize", "SCT"),
  seurat.integratedata.features = NULL,
  seurat.integratedata.features.to.integrate = NULL,
  seurat.integratedata.k.weight = 100,
  seurat.integratedata.weight.reduction = NULL,
  seurat.integratedata.sd.weight = 1,
  seurat.integratedata.sample.tree = NULL,
  seurat.integratedata.preserve.order = FALSE,
  seurat.integratedata.eps = 0,
  seurat.integration.scaledata.features = NULL,
  seurat.integration.scaledata.vars.to.regress = NULL,
  seurat.integration.scaledata.split.by = NULL,
  seurat.integration.scaledata.model.use = "linear",
  seurat.integration.scaledata.use.umi = FALSE,
  seurat.integration.scaledata.do.scale = TRUE,
  seurat.integration.scaledata.do.center = TRUE,
  seurat.integration.scaledata.scale.max = 10,
  seurat.integration.scaledata.block.size = 1000,
  seurat.integration.scaledata.min.cells.to.block = 3000,
  seurat.integration.findvariablefeatures.nfeatures = 2000,
  seurat.integration.findvariablefeatures.selection.method = "vst",
  seurat.integration.findvariablefeatures.loess.span = 0.3,
  seurat.integration.findvariablefeatures.clip.max = "auto",
  seurat.integration.findvariablefeatures.mean.function = "FastExpMean",
  seurat.integration.findvariablefeatures.dispersion.function = "FastLogVMR",
  seurat.integration.findvariablefeatures.num.bin = 20,
  seurat.integration.findvariablefeatures.binning.method = "equal_width",
  seurat.integration.runpca.features = NULL,
  seurat.integration.runpca.npcs = 50,
  seurat.integration.runpca.rev.pca = FALSE,
  seurat.integration.runpca.weight.by.var = TRUE,
  seurat.integration.runpca.ndims.print = 1:5,
  seurat.integration.runpca.nfeatures.print = 30,
  seurat.integration.runpca.reduction.key = "PC_",
  seurat.integration.runpca.seed.use = 42,
  seurat.integration.runpca.approx = TRUE,
  seurat.integration.runumap.pcs = 30,
  seurat.integration.runumap.features = NULL,
  seurat.integration.runumap.graph = NULL,
  seurat.integration.runumap.assay = NULL,
  seurat.integration.runumap.nn.name = NULL,
  seurat.integration.runumap.slot = "data",
  seurat.integration.runumap.umap.method = "uwot",
  seurat.integration.runumap.reduction.model = NULL,
  seurat.integration.runumap.return.model = FALSE,
  seurat.integration.runumap.n.neighbors = 30L,
  seurat.integration.runumap.n.components = 2L,
  seurat.integration.runumap.metric = "cosine",
  seurat.integration.runumap.n.epochs = NULL,
  seurat.integration.runumap.learning.rate = 1,
  seurat.integration.runumap.min.dist = 0.3,
  seurat.integration.runumap.spread = 1,
  seurat.integration.runumap.set.op.mix.ratio = 1,
  seurat.integration.runumap.local.connectivity = 1L,
  seurat.integration.runumap.repulsion.strength = 1,
  seurat.integration.runumap.negative.sample.rate = 5L,
  seurat.integration.runumap.a = NULL,
  seurat.integration.runumap.b = NULL,
  seurat.integration.runumap.uwot.sgd = FALSE,
  seurat.integration.runumap.seed.use = 42L,
  seurat.integration.runumap.metric.kwds = NULL,
  seurat.integration.runumap.angular.rp.forest = FALSE,
  seurat.integration.runumap.densmap = FALSE,
  seurat.integration.runumap.dens.lambda = 2,
  seurat.integration.runumap.dens.frac = 0.3,
  seurat.integration.runumap.dens.var.shift = 0.1,
  seurat.integration.runumap.reduction.name = "umap",
  seurat.integration.runumap.reduction.key = "UMAP_",
  seurat.integration.runtsne.cells = NULL,
  seurat.integration.runtsne.features = NULL,
  seurat.integration.runtsne.seed.use = 1,
  seurat.integration.runtsne.tsne.method = "Rtsne",
  seurat.integration.runtsne.dim.embed = 2,
  seurat.integration.runtsne.distance.matrix = NULL,
  seurat.integration.runtsne.reduction.name = "tsne",
  seurat.integration.runtsne.reduction.key = "tSNE_",
  seurat.integration.runtsne.check_duplicates = FALSE,
  harmony.runharmony.reduction = "pca",
  harmony.runharmony.group.by.vars = "BATCH",
  harmony.runharmony.theta = NULL,
  harmony.runharmony.lambda = NULL,
  harmony.runharmony.sigma = 0.1,
  harmony.runharmony.nclust = NULL,
  harmony.runharmony.tau = 0,
  harmony.runharmony.block.size = 0.05,
  harmony.runharmony.max.iter.harmony = 10,
  harmony.runharmony.max.iter.cluster = 20,
  harmony.runharmony.epsilon.cluster = 1e-05,
  harmony.runharmony.epsilon.harmony = 1e-04,
  harmony.runharmony.plot_convergence = FALSE,
  harmony.runharmony.reference_values = NULL,
  harmony.runharmony.reduction.save = "harmony",
  harmony.runharmony.assay.use = NULL,
  harmony.runharmony.project.dim = TRUE,
  seurat.integration.findneighbors.assay = NULL,
  seurat.integration.findneighbors.features = NULL,
  seurat.integration.findneighbors.k.param = 20,
  seurat.integration.findneighbors.return.neighbor = FALSE,
  seurat.integration.findneighbors.prune.SNN = 1/15,
  seurat.integration.findneighbors.nn.method = "annoy",
  seurat.integration.findneighbors.n.trees = 50,
  seurat.integration.findneighbors.annoy.metric = "euclidean",
  seurat.integration.findneighbors.nn.eps = 0,
  seurat.integration.findneighbors.force.recalc = FALSE,
  seurat.integration.findneighbors.do.plot = FALSE,
  seurat.integration.findneighbors.graph.name = NULL,
  seurat.integration.findneighbors.l2.norm = FALSE,
  seurat.integration.findneighbors.cache.index = FALSE,
  seurat.integration.findclusters.graph.name = NULL,
  seurat.integration.findclusters.modularity.fxn = 1,
  seurat.integration.findclusters.initial.membership = NULL,
  seurat.integration.findclusters.node.sizes = NULL,
  seurat.integration.findclusters.resolution = 0.8,
  seurat.integration.findclusters.method = "matrix",
  seurat.integration.findclusters.algorithm = 1,
  seurat.integration.findclusters.n.start = 10,
  seurat.integration.findclusters.n.iter = 10,
  seurat.integration.findclusters.random.seed = 0,
  seurat.integration.findclusters.group.singletons = TRUE,
  seurat.integration.findclusters.temp.file.location = NULL,
  seurat.integration.findclusters.edge.file.name = NULL,
  metadata_grouping = "INTEGRATED_CELL_TYPE",
  celltalker.celltalk.ligand_receptor_pairs = ramilowski_pairs,
  celltalker.celltalk.number_cells_required = 10,
  celltalker.celltalk.min_expression = 10,
  celltalker.celltalk.max_expression = 20000,
  celltalker.celltalk.scramble_times = 100
)
}
\arguments{
\item{project_name}{Project name. 'Ursa_scRNASEQ' by default.}

\item{input_dir}{Directory to all input files. Default directory
is the current working directory.}

\item{output_dir}{Output directory. Default directory is the
current working directory.
A new folder with the given project name with time stamp as suffix
will be created under the specified output directory.}

\item{pheno_file}{Meta data file directory. Accept only .csv/.txt
format files.}

\item{integration_method}{Integration method.
Accepts 'Seurat' or "Harmony' integration. Default is Seurat.}

\item{cc_regression}{Cell cycle regression method.
Accepts 0 for no regression,
1 for regression with two-phases, 2 for regression with phase
difference (See Seurat). Default is 0.}

\item{to_impute}{Pass 'YES' to perform imputation on individual
samples or 'NO' to skip imputation process. Default is set to 'NO'.}

\item{find_doublet}{Pass 'YES' to perform doublets removal using
 DoubletFinder (Christopher S. M., Cell Systems, 2019). Default
is set to 'YES'. If set to 'NO', potential doublets will not be removed.}

\item{run_unbias_vis}{Plot additional unbias visualizations for top
features using SCUBI (Wenpin H. & Zhicheng J., Cell Reports Methods,
2021) for dimensionally reduced plots such as UMAP. Pass 'YES' to
plot, default to 'NO'.}

\item{seurat.subset.min.nFeature_RNA}{Lower bound to select for cells with
number of genes more than this value. Default is 200.}

\item{seurat.subset.max.nFeature_RNA}{Upper bound to select for cells with
number of genes less than or equals to this value Default is 25000.}

\item{seurat.max.mito.percent}{Threshold percentage to select for cells with
percentage of mitochondria genes less than this value.
This is remove cells which are debris or artefacts and doublets.
Default is 10.}

\item{seurat.runumap.pcs}{(1). Number of principal components (PCs) or Harmonys
(if harmony was chosen for integration) to be used for the analysis. Default to 30.
Please state a reasonable number which is no more than the total number
of cells submitted to avoid running into errors. Similarly for integrated data,
the corresponding parameter is: seurat.integration.runumap.pcs;
(2). alternatively, provide a method name to run an automatic selection of the
number of PCs or Harmonys. Methods include 'none', 'all', 'piecewise linear model',
'first derivative', 'second derivative', 'preceding residual', 'perpendicular line',
and 'k-means clustering'. If 'all' is used, all methods will be assessed and the
final PC number will be determined via the mean of the output of all
methods. For more information, please visit:
https://github.com/haotian-zhuang/findPC
(Zhuang et al., Bioinformatics, 2022).
Default value for seurat.runumap.pcs and seurat.integration.runumap.pcs
is set to 30.}

\item{...}{Arguments passed to other parameters in the dependency pages.
Parameters with the long format: xxx.xxx.xxx usually indicates in lowercases
the parameter origin: <dependent package name>.<function name>.<parameter name>(),
for example: seurat.load10x_spatial.assay() indicates this parameter 
originates from the package Seurat under the function Load10X_Spatial() and its
parameter 'assay'. Users could subsequently refer to the dependency 
package for detailed information on parameters and their usage.}
}
\description{
This function will run a bioinformatics analysis of post-quantification scRNASEQ
pipeline. Supports multiple samples analysis.
}
