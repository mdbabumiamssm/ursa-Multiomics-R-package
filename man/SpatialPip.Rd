% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Mizar.R
\name{SpatialPip}
\alias{SpatialPip}
\title{Run a post-quantification 10X technology-format Spatial Transcriptomics pipeline}
\usage{
SpatialPip(
  project_name = "Ursa_Spatial",
  input_dir = "./",
  output_dir = "./",
  pheno_file,
  rnaseq_dir = "./",
  run_rnaseq = FALSE,
  multipletestingcorrection = "bonferroni",
  padjust_threshold = 0.1,
  seurat.load10x_spatial.assay = "Spatial",
  seurat.load10x_spatial.slice = "slice1",
  seurat.load10x_spatial.filter.matrix = TRUE,
  seurat.load10x_spatial.to.upper = FALSE,
  seurat.load10x_spatial.image = NULL,
  seurat.sctransform.new.assay.name = "SCT",
  seurat.sctransform.reference.SCT.model = NULL,
  seurat.sctransform.do.correct.umi = TRUE,
  seurat.sctransform.ncells = 5000,
  seurat.sctransform.residual.features = NULL,
  seurat.sctransform.variable.features.n = 3000,
  seurat.sctransform.variable.features.rv.th = 1.3,
  seurat.sctransform.vars.to.regress = NULL,
  seurat.sctransform.do.scale = FALSE,
  seurat.sctransform.do.center = TRUE,
  seurat.sctransform.conserve.memory = FALSE,
  seurat.sctransform.return.only.var.genes = TRUE,
  seurat.sctransform.seed.use = 1448145,
  seurat.findvariablefeatures.selection.method = "vst",
  seurat.findvariablefeatures.loess.span = 0.3,
  seurat.findvariablefeatures.clip.max = "auto",
  seurat.findvariablefeatures.num.bin = 20,
  seurat.findvariablefeatures.binning.method = "equal_width",
  seurat.runpca.assay = NULL,
  seurat.runpca.features = NULL,
  seurat.runpca.npcs = 50,
  seurat.runpca.rev.pca = FALSE,
  seurat.runpca.weight.by.var = TRUE,
  seurat.runpca.ndims.print = 1:5,
  seurat.runpca.nfeatures.print = 30,
  seurat.runpca.reduction.name = "pca",
  seurat.runpca.reduction.key = "PC_",
  seurat.runpca.seed.use = 42,
  seurat.runumap.pcs = 30,
  seurat.runumap.features = NULL,
  seurat.runumap.graph = NULL,
  seurat.runumap.assay = NULL,
  seurat.runumap.nn.name = NULL,
  seurat.runumap.slot = "data",
  seurat.runumap.umap.method = "uwot",
  seurat.runumap.reduction.model = NULL,
  seurat.runumap.return.model = FALSE,
  seurat.runumap.n.neighbors = 30L,
  seurat.runumap.n.components = 2L,
  seurat.runumap.metric = "cosine",
  seurat.runumap.n.epochs = NULL,
  seurat.runumap.learning.rate = 1,
  seurat.runumap.min.dist = 0.3,
  seurat.runumap.spread = 1,
  seurat.runumap.set.op.mix.ratio = 1,
  seurat.runumap.local.connectivity = 1L,
  seurat.runumap.repulsion.strength = 1,
  seurat.runumap.negative.sample.rate = 5L,
  seurat.runumap.a = NULL,
  seurat.runumap.b = NULL,
  seurat.runumap.uwot.sgd = FALSE,
  seurat.runumap.seed.use = 42L,
  seurat.runumap.metric.kwds = NULL,
  seurat.runumap.angular.rp.forest = FALSE,
  seurat.runumap.densmap = FALSE,
  seurat.runumap.dens.lambda = 2,
  seurat.runumap.dens.frac = 0.3,
  seurat.runumap.dens.var.shift = 0.1,
  seurat.runumap.reduction.name = "umap",
  seurat.runumap.reduction.key = "UMAP_",
  seurat.runtsne.cells = NULL,
  seurat.runtsne.features = NULL,
  seurat.runtsne.seed.use = 1,
  seurat.runtsne.tsne.method = "Rtsne",
  seurat.runtsne.dim.embed = 2,
  seurat.runtsne.distance.matrix = NULL,
  seurat.runtsne.reduction.name = "tsne",
  seurat.runtsne.reduction.key = "tSNE_",
  seurat.runtsne.check_duplicates = FALSE,
  seurat.findneighbors.assay = NULL,
  seurat.findneighbors.features = NULL,
  seurat.findneighbors.k.param = 20,
  seurat.findneighbors.return.neighbor = FALSE,
  seurat.findneighbors.prune.SNN = 1/15,
  seurat.findneighbors.nn.method = "annoy",
  seurat.findneighbors.n.trees = 50,
  seurat.findneighbors.annoy.metric = "euclidean",
  seurat.findneighbors.nn.eps = 0,
  seurat.findneighbors.force.recalc = FALSE,
  seurat.findneighbors.do.plot = FALSE,
  seurat.findneighbors.graph.name = NULL,
  seurat.findneighbors.l2.norm = FALSE,
  seurat.findneighbors.cache.index = FALSE,
  seurat.findclusters.graph.name = NULL,
  seurat.findclusters.modularity.fxn = 1,
  seurat.findclusters.initial.membership = NULL,
  seurat.findclusters.node.sizes = NULL,
  seurat.findclusters.resolution = 0.8,
  seurat.findclusters.method = "matrix",
  seurat.findclusters.algorithm = 1,
  seurat.findclusters.n.start = 10,
  seurat.findclusters.n.iter = 10,
  seurat.findclusters.random.seed = 0,
  seurat.findclusters.group.singletons = TRUE,
  seurat.findclusters.temp.file.location = NULL,
  seurat.findclusters.edge.file.name = NULL,
  seurat.findallmarkers.assay = NULL,
  seurat.findallmarkers.features = NULL,
  seurat.findallmarkers.logfc.threshold = 0.25,
  seurat.findallmarkers.test.use = "wilcox",
  seurat.findallmarkers.slot = "data",
  seurat.findallmarkers.min.pct = 0.25,
  seurat.findallmarkers.min.diff.pct = -Inf,
  seurat.findallmarkers.node = NULL,
  seurat.findallmarkers.only.pos = FALSE,
  seurat.findallmarkers.max.cells.per.ident = Inf,
  seurat.findallmarkers.random.seed = 1,
  seurat.findallmarkers.latent.vars = NULL,
  seurat.findallmarkers.min.cells.feature = 3,
  seurat.findallmarkers.min.cells.group = 3,
  seurat.findallmarkers.mean.fxn = NULL,
  seurat.findallmarkers.fc.name = NULL,
  seurat.findallmarkers.base = 2,
  seurat.findallmarkers.return.thresh = 0.05,
  seurat.findallmarkers.densify = FALSE,
  singler.ref = "HumanPrimaryCellAtlas",
  singler.labels = "HumanPrimaryCellAtlasLevel2",
  singler.method = NULL,
  singler.genes = "de",
  singler.sd.thresh = 1,
  singler.de.method = "classic",
  singler.de.n = NULL,
  singler.de.args = list(),
  singler.aggr.ref = FALSE,
  singler.aggr.args = list(),
  singler.recompute = TRUE,
  singler.restrict = NULL,
  singler.quantile = 0.8,
  singler.fine.tune = TRUE,
  singler.tune.thresh = 0.05,
  singler.prune = TRUE,
  singler.assay.type.test = "logcounts",
  singler.assay.type.ref = "logcounts",
  singler.check.missing = TRUE,
  seurat.scrnaseq.createseuratobject.min.cells = 3,
  seurat.scrnaseq.subset.min.nFeature_RNA = 200,
  seurat.scrnaseq.subset.max.nFeature_RNA = 6000,
  seurat.scrnaseq.subset.max.percent.mt = 10,
  seurat.scrnaseq.sctransform.assay = "RNA",
  seurat.scrnaseq.sctransform.new.assay.name = "SCT",
  seurat.scrnaseq.sctransform.reference.SCT.model = NULL,
  seurat.scrnaseq.sctransform.do.correct.umi = TRUE,
  seurat.scrnaseq.sctransform.ncells = 3000,
  seurat.scrnaseq.sctransform.residual.features = NULL,
  seurat.scrnaseq.sctransform.variable.features.n = 3000,
  seurat.scrnaseq.sctransform.variable.features.rv.th = 1.3,
  seurat.scrnaseq.sctransform.vars.to.regress = NULL,
  seurat.scrnaseq.sctransform.do.scale = FALSE,
  seurat.scrnaseq.sctransform.do.center = TRUE,
  seurat.scrnaseq.sctransform.conserve.memory = FALSE,
  seurat.scrnaseq.sctransform.return.only.var.genes = TRUE,
  seurat.scrnaseq.sctransform.seed.use = 1448145,
  seurat.scrnaseq.runpca.assay = NULL,
  seurat.scrnaseq.runpca.features = NULL,
  seurat.scrnaseq.runpca.npcs = 50,
  seurat.scrnaseq.runpca.rev.pca = FALSE,
  seurat.scrnaseq.runpca.weight.by.var = TRUE,
  seurat.scrnaseq.runpca.ndims.print = 1:5,
  seurat.scrnaseq.runpca.nfeatures.print = 30,
  seurat.scrnaseq.runpca.reduction.name = "pca",
  seurat.scrnaseq.runpca.reduction.key = "PC_",
  seurat.scrnaseq.runpca.seed.use = 42,
  seurat.scrnaseq.runumap.pcs = 30,
  seurat.scrnaseq.runumap.features = NULL,
  seurat.scrnaseq.runumap.graph = NULL,
  seurat.scrnaseq.runumap.assay = NULL,
  seurat.scrnaseq.runumap.nn.name = NULL,
  seurat.scrnaseq.runumap.slot = "data",
  seurat.scrnaseq.runumap.umap.method = "uwot",
  seurat.scrnaseq.runumap.reduction.model = NULL,
  seurat.scrnaseq.runumap.return.model = FALSE,
  seurat.scrnaseq.runumap.n.neighbors = 30L,
  seurat.scrnaseq.runumap.n.components = 2L,
  seurat.scrnaseq.runumap.metric = "cosine",
  seurat.scrnaseq.runumap.n.epochs = NULL,
  seurat.scrnaseq.runumap.learning.rate = 1,
  seurat.scrnaseq.runumap.min.dist = 0.3,
  seurat.scrnaseq.runumap.spread = 1,
  seurat.scrnaseq.runumap.set.op.mix.ratio = 1,
  seurat.scrnaseq.runumap.local.connectivity = 1L,
  seurat.scrnaseq.runumap.repulsion.strength = 1,
  seurat.scrnaseq.runumap.negative.sample.rate = 5L,
  seurat.scrnaseq.runumap.a = NULL,
  seurat.scrnaseq.runumap.b = NULL,
  seurat.scrnaseq.runumap.uwot.sgd = FALSE,
  seurat.scrnaseq.runumap.seed.use = 42L,
  seurat.scrnaseq.runumap.metric.kwds = NULL,
  seurat.scrnaseq.runumap.angular.rp.forest = FALSE,
  seurat.scrnaseq.runumap.densmap = FALSE,
  seurat.scrnaseq.runumap.dens.lambda = 2,
  seurat.scrnaseq.runumap.dens.frac = 0.3,
  seurat.scrnaseq.runumap.dens.var.shift = 0.1,
  seurat.scrnaseq.runumap.reduction.name = "umap",
  seurat.scrnaseq.runumap.reduction.key = "UMAP_",
  seurat.scrnaseq.runtsne.cells = NULL,
  seurat.scrnaseq.runtsne.features = NULL,
  seurat.scrnaseq.runtsne.seed.use = 1,
  seurat.scrnaseq.runtsne.tsne.method = "Rtsne",
  seurat.scrnaseq.runtsne.dim.embed = 2,
  seurat.scrnaseq.runtsne.distance.matrix = NULL,
  seurat.scrnaseq.runtsne.reduction.name = "tsne",
  seurat.scrnaseq.runtsne.reduction.key = "tSNE_",
  seurat.scrnaseq.runtsne.check_duplicates = FALSE,
  seurat.scrnaseq.findneighbors.assay = NULL,
  seurat.scrnaseq.findneighbors.features = NULL,
  seurat.scrnaseq.findneighbors.k.param = 20,
  seurat.scrnaseq.findneighbors.return.neighbor = FALSE,
  seurat.scrnaseq.findneighbors.prune.SNN = 1/15,
  seurat.scrnaseq.findneighbors.nn.method = "annoy",
  seurat.scrnaseq.findneighbors.n.trees = 50,
  seurat.scrnaseq.findneighbors.annoy.metric = "euclidean",
  seurat.scrnaseq.findneighbors.nn.eps = 0,
  seurat.scrnaseq.findneighbors.force.recalc = FALSE,
  seurat.scrnaseq.findneighbors.do.plot = FALSE,
  seurat.scrnaseq.findneighbors.graph.name = NULL,
  seurat.scrnaseq.findneighbors.l2.norm = FALSE,
  seurat.scrnaseq.findneighbors.cache.index = FALSE,
  seurat.scrnaseq.findclusters.graph.name = NULL,
  seurat.scrnaseq.findclusters.modularity.fxn = 1,
  seurat.scrnaseq.findclusters.initial.membership = NULL,
  seurat.scrnaseq.findclusters.node.sizes = NULL,
  seurat.scrnaseq.findclusters.resolution = 0.8,
  seurat.scrnaseq.findclusters.method = "matrix",
  seurat.scrnaseq.findclusters.algorithm = 1,
  seurat.scrnaseq.findclusters.n.start = 10,
  seurat.scrnaseq.findclusters.n.iter = 10,
  seurat.scrnaseq.findclusters.random.seed = 0,
  seurat.scrnaseq.findclusters.group.singletons = TRUE,
  seurat.scrnaseq.findclusters.temp.file.location = NULL,
  seurat.scrnaseq.findclusters.edge.file.name = NULL,
  singler.scrnaseq.ref = "HumanPrimaryCellAtlas",
  singler.scrnaseq.labels = "HumanPrimaryCellAtlasLevel1",
  singler.scrnaseq.method = NULL,
  singler.scrnaseq.genes = "de",
  singler.scrnaseq.sd.thresh = 1,
  singler.scrnaseq.de.method = "classic",
  singler.scrnaseq.de.n = NULL,
  singler.scrnaseq.de.args = list(),
  singler.scrnaseq.aggr.ref = FALSE,
  singler.scrnaseq.aggr.args = list(),
  singler.scrnaseq.recompute = TRUE,
  singler.scrnaseq.restrict = NULL,
  singler.scrnaseq.quantile = 0.8,
  singler.scrnaseq.fine.tune = TRUE,
  singler.scrnaseq.tune.thresh = 0.05,
  singler.scrnaseq.prune = TRUE,
  singler.scrnaseq.assay.type.test = "logcounts",
  singler.scrnaseq.assay.type.ref = "logcounts",
  singler.scrnaseq.check.missing = TRUE,
  seurat.multimodalintegration.findfransferanchors.normalization.method = "SCT",
  seurat.multimodalintegration.findfransferanchors.recompute.residuals = TRUE,
  seurat.multimodalintegration.findfransferanchors.reference.assay = NULL,
  seurat.multimodalintegration.findfransferanchors.reference.neighbors = NULL,
  seurat.multimodalintegration.findfransferanchors.query.assay = NULL,
  seurat.multimodalintegration.findfransferanchors.reduction = "pcaproject",
  seurat.multimodalintegration.findfransferanchors.reference.reduction = NULL,
  seurat.multimodalintegration.findfransferanchors.project.query = FALSE,
  seurat.multimodalintegration.findfransferanchors.features = NULL,
  seurat.multimodalintegration.findfransferanchors.scale = TRUE,
  seurat.multimodalintegration.findfransferanchors.npcs = 30,
  seurat.multimodalintegration.findfransferanchors.l2.norm = TRUE,
  seurat.multimodalintegration.findfransferanchors.k.anchor = 5,
  seurat.multimodalintegration.findfransferanchors.k.filter = 200,
  seurat.multimodalintegration.findfransferanchors.k.score = 30,
  seurat.multimodalintegration.findfransferanchors.max.features = 200,
  seurat.multimodalintegration.findfransferanchors.nn.method = "annoy",
  seurat.multimodalintegration.findfransferanchors.n.trees = 50,
  seurat.multimodalintegration.findfransferanchors.eps = 0,
  seurat.multimodalintegration.findfransferanchors.approx.pca = TRUE,
  seurat.multimodalintegration.findfransferanchors.mapping.score.k = NULL,
  seurat.multimodalintegration.transferdata.reference = NULL,
  seurat.multimodalintegration.transferdata.query = NULL,
  seurat.multimodalintegration.transferdata.weight.reduction = "pcaproject",
  seurat.multimodalintegration.transferdata.l2.norm = FALSE,
  seurat.multimodalintegration.transferdata.k.weight = 50,
  seurat.multimodalintegration.transferdata.sd.weight = 1,
  seurat.multimodalintegration.transferdata.eps = 0,
  seurat.multimodalintegration.transferdata.n.trees = 50,
  seurat.multimodalintegration.transferdata.slot = "data",
  seurat.multimodalintegration.transferdata.prediction.assay = TRUE,
  seurat.multimodalintegration.transferdata.store.weights = TRUE
)
}
\arguments{
\item{project_name}{Project name. 'Ursa_Spatial' by default.}

\item{input_dir}{Directory to all input files. Current working directory by
default.}

\item{output_dir}{Output directory. Current working directory by default.
A new folder with the given project name with time stamp as suffix will be
created under the specified output directory.}

\item{pheno_file}{Meta data file directory. Accept only .csv/.txt format
files.}

\item{rnaseq_dir}{scRNA-seq data files directory. We recommend putting the scRNA-seq
data in a separate directory separating them from spatial input files.
scRNA-seq files should be filtered .h5 format files from 10X Genomics and their file
names should have the same sample ID as file prefix to their correspond spatial files.}

\item{run_rnaseq}{If scRNA-seq integration with spatial data should be run. Default to FALSE.
There is no need to prepare scRNA-seq folder if run_rnaseq is set to FALSE.}

\item{multipletestingcorrection}{Correction method for multiple testing.
Default to "bonferroni". Methods include: "holm", "hochberg", "hommel", 
"bonferroni", "BH", "BY", "fdr", "none". (refer to the p.adjust() function
in stats package for details).}

\item{padjust_threshold}{Threshold for retaining entries with corrected
p-values. Default to 0.1.}

\item{seurat.scrnaseq.createseuratobject.min.cells}{If run_rnaseq is set to TRUE, the quality
control filter for minimum number of cells with features detected. Default to 3 (refer to the
subset() function in Seurat package for details).}

\item{seurat.scrnaseq.subset.min.nFeature_RNA}{If run_rnaseq is set to TRUE, the quality
control filter for cells with at least this number of features detected.
Default to 200 (refer to the subset() function in Seurat package for details).}

\item{seurat.scrnaseq.subset.max.nFeature_RNA}{If run_rnaseq is set to TRUE, the quality
control filter for cells with at most this number of features detected.
Default to 6000 (refer to the subset() function in Seurat package for details).}

\item{seurat.scrnaseq.subset.max.percent.mt}{If run_rnaseq is set to TRUE, the quality
control filter for cells high proportion of mitochondrial reads.
Default to 10.}

\item{...}{Arguments passed to other parameters in the dependency pages.
Parameters with the long format: xxx.xxx.xxx usually indicates in lowercases
the parameter origin: <dependent package name>.<function name>.<parameter name>(),
for example: seurat.load10x_spatial.assay() indicates this parameter 
originates from the package Seurat under the function Load10X_Spatial() and its
parameter 'assay'. Users could subsequently refer to the dependency 
package for detailed information on parameters and their usage.}
}
\description{
This function will run a bioinformatics analysis of post-quantification Spatial
pipeline. Supports multiple samples analysis.
}
